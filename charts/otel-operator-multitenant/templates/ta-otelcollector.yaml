{{- $teams := include "otel-operator-multitenant.test123" . | fromYaml }}
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: collector-with-ta
  namespace: opentelemetry
spec:
  mode: statefulset
  replicas: 2
  serviceAccount: targetallocator-sa
  env:
  {{- range $teamName, $teamInfo := $teams }}
  - name: NR_LICENSE_KEY_{{ $teamName | upper | replace "-" "_" }}
    valueFrom:
      secretKeyRef:
        name: {{ $teamInfo.licenseKey.secretRef.name }}
        key: {{ $teamInfo.licenseKey.secretRef.key }}
  {{- end }}
  targetAllocator:
    enabled: true
    serviceAccount: targetallocator-sa
    prometheusCR:
      enabled: true
      podMonitorSelector: {}
      serviceMonitorSelector: {}
  config:
    receivers:
      prometheus:
        config:
          scrape_configs:
          - job_name: 'otel-collector'
            scrape_interval: 10s
            static_configs:
            - targets: [ '0.0.0.0:8888' ]
            metric_relabel_configs:
            - action: labeldrop
              regex: (id|name)
              replacement: $$1
            - action: labelmap
              regex: label_(.+)
              replacement: $$1

    processors:
      memory_limiter:
        check_interval: 5s
        limit_mib: 4000
        spike_limit_mib: 200
      batch: {}

      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        # filter:
        #   # only retrieve pods running on the same node as the collector
        #   node_from_env_var: KUBE_NODE_NAME
        extract:
          # The attributes provided in 'metadata' will be added to associated resources
          # metadata:
          #   - k8s.pod.name
          #   - k8s.pod.uid
          #   - k8s.deployment.name
          #   - k8s.namespace.name
          #   - k8s.node.name
          #   - k8s.pod.start_time
          #   - service.namespace
          #   - service.name
          #   - service.version
          #   - service.instance.id
          labels:
            # This label extraction rule takes the value 'app.kubernetes.io/component' label and maps it to the 'app.label.component' attribute which will be added to the associated resources
            - tag_name: test.label
              key: test.label
              from: pod
          # otel_annotations: true
        pod_association:
          - sources:
              # This rule associates all resources containing the 'k8s.pod.ip' attribute with the matching pods. If this attribute is not present in the resource, this rule will not be able to find the matching pod.
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              # This rule associates all resources containing the 'k8s.pod.uid' attribute with the matching pods. If this attribute is not present in the resource, this rule will not be able to find the matching pod.
              - from: resource_attribute
                name: k8s.pod.uid
          # - sources:
          #     # This rule will use the IP from the incoming connection from which the resource is received, and find the matching pod, based on the 'pod.status.podIP' of the observed pods
          #     - from: connection
      
      resource:
        attributes:
          - action: upsert
            key: newrelic.entity.type
            value: k8s
      
      {{- range $teamName, $teamInfo := $teams }}
      resource/{{ $teamName }}:
        attributes:
          - key: "collector.source"
            action: "insert"
            value: "{{ $teamName}}"
      {{- "" | nindent 12 }}  
      {{- end }}

    connectors:
    
      routing/metrics:
        default_pipelines: [metrics/default]
        table:
          {{- range $teamName, $teamInfo := $teams }}
          - context: metric
            condition: 'resource.attributes["k8s.namespace.name"] == "{{ $teamName }}"{{ if $teamInfo.vsad }}or resource.attributes["verizon.vsad"] == "{{ $teamInfo.test.label}}"{{ end }}'
            pipelines:
              - metrics/{{ $teamName }}
          {{- "" | nindent 12 }}    
          {{- end }}


    exporters:

      debug: {}
      {{- range $teamName, $teamInfo := $teams }}
      otlphttp/{{ $teamName }}:
        endpoint: {{ $teamInfo.endpoint}}
        headers:
          api-key: ${NR_LICENSE_KEY_{{ $teamName | upper | replace "-" "_" }}}
      {{- "" | nindent 12 }}  
      {{- end }}

    service:
      pipelines: 
        metrics/default:
          receivers: [routing/metrics]
          processors: [memory_limiter, resource, resource/platform, batch]
          # The routing connector acts as an exporter for the first pipeline...
          exporters: [debug]

        metrics/ingress:
          receivers: [prometheus]
          processors: [memory_limiter, batch]
          # The routing connector acts as an exporter for the first pipeline...
          exporters: [routing/metrics]
        {{- "" | nindent 12 }}  
        {{- range $teamName, $teamInfo := $teams }}
        metrics/{{ $teamName}}:
          receivers: [routing/metrics]
          processors: [memory_limiter, resource, resource/{{ $teamName }}, k8sattributes, batch]
          exporters: [debug]
          {{- "" | nindent 12 }}  
        {{- end }}